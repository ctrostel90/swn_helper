import {VerticalBox, HorizontalBox, ComboBox, Button, SpinBox} from "std-widgets.slint";

import {ShipWeaponGrid } from "./combo_tables/weapon_combo_table.slint";
import {ShipFittingGrid} from "./combo_tables/ship_fitting_table.slint";

import {ShipHullComboBox} from "./combo_tables/ship_hull_table.slint";

import { Icons } from "../widgets/styling.slint";

export struct ShipBuilderData {
    ship-name:string,
    ship-hull-type:string,
    ship-class:string,
    ship-hp:int,
    ship-crew-min:int,
    ship-crew-max:int,
    ship-armor:int,
    ship-ac:int,
    ship-power:int,
    ship-mass:int,
    ship-npc-cp:int,
    ship-speed:int,
    weapon-fittings:[int],
    fittings:[int],
}

export global ShipBuilderAdapter{
    callback create(ShipBuilderData);
    callback set_ship(ShipBuilderData);
    callback hull-selected(int);
    callback weapon-selected(int,int);
    callback fitting-selected(int,int);

    in-out property <ShipBuilderData> ship;
    in property <[[string]]> hull-model:[
        ["Strike Fighter"  , "200,000"     , "5","5" ,"8" ,"1/1"  , "16", "5" , "2" , "1", "Fighter"],
        ["Shuttle"          , "200,000"     , "3","0" ,"15","1/10" , "11", "3" , "5" , "1", "Fighter"],
        ["Free Merchant"    , "500,000"     , "3","2" ,"20","1/6"  , "14", "10", "15", "2", "Frigate"],
        ["Patrol Boat"      , "2,500,000"   , "4","5" ,"25","5/20" , "14", "15", "10", "4", "Frigate"],
        ["Corvette"         , "4,000,000"   , "2","10","40","10/40", "13", "15", "15", "6", "Frigate"],
    ];    
    in property <[[string]]> weapon-model:[
        ["Multifocal Laser", "100000", "1d4","5","1","1", "Fighter", "4", "AP20"],
        ["Reaper Battery","100000","3d4","4","1","1","Fighter","4","Clumsy"],
        ["Fractal Impact Charge","200000","2d6","5","1","1","Fighter","4","AP15"],
        ["Polyspectral MES Beam","2000000","2d4","5","1","1","Fighter","5","AP25"],
        ["Sandthrower","50000","2d4","3","1","1","Fighter","4","Flak"],
        ["Flak Emitter Battery","500000","2d6","5","3","1","Fighter","4","AP10"],
    ];
    in property <[[string]]> fittings-model:[
        ["Advanced Lab"      , "10,000*"  , "1#","2" ,"Frigate" ,"" ],
        ["Cargo sleep pods"  , "5,000*"   , "1","1"  ,"Frigate" ,"" ],
        ["Fuel bunkers"      , "2,000*"   , "0","1"  ,"Fighter" ,"" ],
        ["Fuel scoops"       , "5,000*"   , "2","1#" ,"Frigate" ,"" ],
        ["Lifeboats"         , "2,500*"   , "0","1"  ,"Frigate" ," "],
    ];
    
    set_ship(new-ship) =>{
        ship = new-ship;
    }
}
export component ShipBuilderView{
    in-out property <ShipBuilderData> model: ShipBuilderAdapter.ship;

    VerticalBox {
        HorizontalBox {
            VerticalBox{
                HorizontalBox {
                    Text {
                        text:"Ship Name:";
                        vertical-alignment: center;
                    }
                    Rectangle {
                        border-radius: 5px;
                        background: #70a094;
                        ship-name-input := TextInput {
                            x: parent.x - parent.width / 3;
                            vertical-alignment: center;
                            text: model.ship-name;
                            
                            edited() => {
                                model.ship-name = self.text;
                            }
                        }
                    }
                    
                }
                HorizontalBox {
                    ship-class-label := Text{
                        text: "Ship Class:";
                        vertical-alignment: center;
                    }
                    ship-class-input := ComboBox {
                        model: [
                            "Frigate",
                            "Cruiser",
                            "Capital",
                        ];
                        selected(new-value) => {
                            model.ship-class = new-value;
                        }
                    }
                    ship-class-add-new := Button {
                        icon: Icons.add;
                    }
                }
                HorizontalBox {
                    ship-hull-label := Text{
                        text: "Ship Hull:";
                        vertical-alignment: center;
                    }
                    ship-hull-input := ShipHullComboBox{
                        model: ShipBuilderAdapter.hull-model;
                        selected-index(index) => {
                            ShipBuilderAdapter.hull-selected(index);
                        }
                    }
                }
            }
            HorizontalBox {
                Text {
                    text: "Ship Stats:";
                }
                VerticalBox {   
                    HorizontalBox {
                        ship-hp-label := Text {
                            text: "HP:";
                            vertical-alignment: center;
                        }
                        ship-hp-input := SpinBox {
                            value: model.ship-hp;
                            minimum: 0;
                            height: 25px;
                            edited(new-value) => {
                                model.ship-hp = new-value;
                            }
                        }
                    }
                    HorizontalBox {
                        ship-ac-label := Text {
                            text: "AC:";
                            vertical-alignment: center;
                        }
                        ship-ac-input := SpinBox {
                            value: model.ship-ac;
                            minimum: 0;
                            height: 25px;
                            
                        }
                    }
                    HorizontalBox {
                        ship-armor-label := Text {
                            text: "Armor:";
                            vertical-alignment: center;
                        }
                        ship-armor-input := SpinBox {
                            value: model.ship-armor;
                            minimum: 0;
                            height: 25px;
                            edited(new-value) => {
                                model.ship-armor = new-value;
                            }
                        }
                    }
                    HorizontalBox {
                        ship-speed-label := Text {
                            text: "Speed:";
                            vertical-alignment: center;
                        }
                        ship-speed-input := SpinBox {
                            value: model.ship-speed;
                            minimum: 0;
                            height: 25px;
                            edited(new-value) => {
                                model.ship-speed = new-value;
                            }
                        }
                    }
                }
                VerticalBox {   
                    HorizontalBox {
                        ship-power-label := Text {
                            text: "Power:";
                            vertical-alignment: center;
                        }
                        ship-power-input := SpinBox {
                            value: model.ship-power;
                            minimum: 0;
                            height: 25px;
                            edited(new-value) => {
                                model.ship-power = new-value;
                            }
                        }
                    }
                    HorizontalBox {
                        ship-mass-label := Text {
                            text: "Mass:";
                            vertical-alignment: center;
                        }
                        ship-mass-input := SpinBox {
                            value: model.ship-mass;
                            minimum: 0;
                            height: 25px;
                            edited(new-value) => {
                                model.ship-mass = new-value;
                            }
                        }
                    }
                    HorizontalBox {
                        ship-crew-label := Text {
                            text: "Crew:";
                            vertical-alignment: center;
                        }
                        ship-crew-minimum-input := SpinBox {
                            value: model.ship-crew-min;
                            minimum: 0;
                            height: 25px;
                            edited(new-value) => {
                                model.ship-crew-min = new-value;
                            }
                        }
                        Text {
                            text: "/";
                            vertical-alignment: center;
                        }
                        ship-crew-max-input := SpinBox {
                            value: model.ship-crew-max;
                            minimum: 0;
                            height: 25px;
                            edited(new-value) => {
                                model.ship-crew-max = new-value;
                            }
                        }
                    }
                    HorizontalBox {
                        ship-npc-cp-label := Text {
                            text: "NPC CP:";
                            vertical-alignment: center;
                        }
                        ship-npc-cp-input := SpinBox {
                            value: model.ship-npc-cp;
                            minimum: 0;
                            height: 25px;
                            edited(new-value) => {
                                model.ship-npc-cp = new-value;
                            }
                        }
                    }
                    HorizontalBox {
                        ship-hard-point-count-label := Text {
                            text: "Number Hardpoints:" + model.weapon-fittings.length;
                            vertical-alignment: center;
                        }
                    }
                }
            }
        }
        Text{
            text: "Weapons";
            font-size: 16px;
        }
        ship-weapon-grid := ShipWeaponGrid{
            hardpoint-count: ship-npc-cp-input.value;
            model: ShipBuilderAdapter.weapon-model;
            item_selected(weapon-slot-idx,weapon-idx) => {
                ShipBuilderAdapter.weapon-selected(weapon-slot-idx,weapon-idx);
                ShipBuilderAdapter.ship.weapon-fittings[weapon-slot-idx] = weapon-idx;
            }
        }
        
        Text {
            text: "Fittings";
            font-size: 16px;
            height: 80px;
            vertical-alignment: center;
        }
        fitting-weapon-grid := ShipWeaponGrid{
            hardpoint-count: ship-npc-cp-input.value;
            model: ShipBuilderAdapter.fittings-model;
            item_selected(fitting-slot-idx,fitting-idx) => {
                ShipBuilderAdapter.fitting-selected(fitting-slot-idx,fitting-idx);
                ShipBuilderAdapter.ship.fittings[fitting-slot-idx] = fitting-idx;
            }
        }
        
        create-ship-button := Button {
            primary: true;
            text: "Create Ship";
            clicked => {
                root.create(model);
            }
        }
    }
    function create(new-ship:ShipBuilderData){
        ShipBuilderAdapter.create(new-ship);
    }
}