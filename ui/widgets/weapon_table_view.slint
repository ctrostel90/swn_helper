import { StandardTableView, VerticalBox, ListView, Button } from "std-widgets.slint";
import { Icons } from "styling.slint";

export struct ShipWeaponListViewItem{
    weapon-name:string,
    weapon-cost:int,
    weapon-damage:string,
    weapon-power:int,
    weapon-mass:int,
    weapon-hard-point-count:int,
    weapon-class:string,
    weapon-tech-level:int,
    weapon-qualities:string,
}
export component ShipWeaponTableItemDelegate {
    in property <bool> editable: true;

    in property <string> weapon-name <=> weapon-name-input.text;
    in property <string> weapon-cost <=> weapon-cost-input.text;
    in property <string> weapon-damage <=> weapon-damage-input.text;
    in property <string> weapon-power <=> weapon-power-input.text;
    in property <string> weapon-mass <=> weapon-mass-input.text;
    in property <string> weapon-hard-point-count <=> weapon-hard-point-count-input.text;
    in property <string> weapon-class <=> weapon-class-input.text;
    in property <string> weapon-tech-level <=> weapon-tech-level-input.text;
    in property <string> weapon-qualities <=> weapon-qualities-input.text;

    in property <brush> background;
    callback clicked;

    in-out property <[length]> column_sizes;
    layout := Rectangle{
        background: root.background;
            HorizontalLayout {
            col1 := TouchArea {
                width: root.column_sizes[0];
                height: 20px;
                weapon-name-input := TextInput { 
                    horizontal-alignment: left;
                    enabled: root.editable;
                }
                clicked => {
                    root.clicked();
                }
            }
            col2 := TouchArea {
                width: root.column_sizes[1];
                height: 15px;
                weapon-cost-input := TextInput { 
                    horizontal-alignment: center;
                    enabled: root.editable;
                }
                clicked => {
                    root.clicked();
                }
            }
            col3 := TouchArea {
                width: root.column_sizes[2];
                height: 15px;
                weapon-damage-input := TextInput { 
                    horizontal-alignment: center;
                    enabled: root.editable;
                }
                clicked => {
                    root.clicked();
                }
            }
            col4 := TouchArea {
                width: root.column_sizes[3];
                height: 15px;
                weapon-power-input := TextInput { 
                    horizontal-alignment: center;
                    enabled: root.editable;
                }
                clicked => {
                    root.clicked();
                }
            }
            col5 := TouchArea {
                width: root.column_sizes[4];
                height: 15px;
                weapon-mass-input := TextInput { 
                    horizontal-alignment: center;
                    enabled: root.editable;
                }
                clicked => {
                    root.clicked();
                }
            }
            col6 := TouchArea {
                width: root.column_sizes[5];
                height: 15px;
                weapon-hard-point-count-input := TextInput { 
                    horizontal-alignment: center;
                    enabled: root.editable;
                }
                clicked => {
                    root.clicked();
                }
            }
            col7 := TouchArea {
                width: root.column_sizes[6];
                height: 15px;
                weapon-class-input := TextInput { 
                    horizontal-alignment: center;
                    enabled: root.editable;
                }
                clicked => {
                    root.clicked();
                }
            }
            col8 := TouchArea {
                width: root.column_sizes[7];
                height: 15px;
                weapon-tech-level-input := TextInput { 
                    horizontal-alignment: center;
                    enabled: root.editable;
                }
                clicked => {
                    root.clicked();
                }
            }
            col9 := TouchArea {
                width: root.column_sizes[8];
                height: 15px;
                weapon-qualities-input := TextInput { 
                    horizontal-alignment: center;
                    enabled: root.editable;
                }
                clicked => {
                    root.clicked();
                }
            }
        }
    }
}
export component TableView inherits Rectangle {
    in property <[string]> columns;
    in property <[[string]]> values;
    in property <[ShipWeaponListViewItem]> model;

    in property <color> row-color-one;
    in property <color> row-color-two;
    in property <color> column-background;
    in property <bool> editable:true;

    callback new-item; 
    callback row-selected(int);

    private property <length> e: self.width / root.columns.length;
    in-out property <[length]> column_sizes: [
        root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e,
        root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e,
        root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e, root.e,
    ];

    VerticalBox {
        padding: 5px;
        //Columns
        HorizontalLayout {
            padding: 5px; spacing: 5px;
            vertical-stretch: 0;
            for title[idx] in root.columns : HorizontalLayout {
                spacing: 5px;
                width: root.column_sizes[idx];
                Rectangle {
                    border-radius: 5px;
                    height: 20px;
                    background: column-background;
                    Text { 
                        font-weight: 600;
                        overflow: elide; text: title; 
                    }
                }
                
                Rectangle {
                    width: 1px;
                    background: gray;
                    TouchArea {
                        width: 10px;
                        x: (parent.width - self.width) / 2;
                        property <length> cached;
                        pointer-event(event) => {
                            if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                                self.cached = root.column_sizes[idx];
                            }
                        }
                        moved => {
                            if (self.pressed) {
                                root.column_sizes[idx] += (self.mouse-x - self.pressed-x);
                                if (root.column_sizes[idx] < 0) {
                                    root.column_sizes[idx] = 0;
                                }
                            }
                        }
                        mouse-cursor: ew-resize;
                    }
                }
            }
        }
        //Data
        data-table := ListView {
            for item[index] in root.model: ShipWeaponTableItemDelegate{
                column_sizes: root.column_sizes;
                background: Math.mod(index,2) == 0 ? row-color-one:row-color-two;
                editable: root.editable;

                weapon-name: item.weapon-name;
                weapon-cost: item.weapon-cost;
                weapon-damage: item.weapon-damage;
                weapon-power: item.weapon-power;
                weapon-mass: item.weapon-mass;
                weapon-hard-point-count: item.weapon-hard-point-count;
                weapon-class: item.weapon-class;
                weapon-tech-level: item.weapon-tech-level;
                weapon-qualities: item.weapon-qualities;

                clicked => {
                    root.row-selected(index);
                }
            }
        }
        Button {
            icon: Icons.add;
            width: parent.width;
            clicked => {
                root.new-item();
            }
        }
    }
}
